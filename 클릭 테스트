#include <windows.h>
#include <iostream>
#include <thread>
#include <cmath>

#define ENTITY_LIST      0x50F4F8   // 엔티티 배열 시작 주소
#define MAX_PLAYERS      32
#define PLAYER_X         0x04
#define PLAYER_Y         0x08
#define PLAYER_Z         0x0C
#define PLAYER_HP        0xF8
#define PLAYER_TEAM      0x32C

#define MY_PLAYER_PTR    0x509B74   // 내 플레이어 구조체 주소 (포인터)
#define SCAN_INTERVAL_MS 100        // 스캔 주기 (100ms = 0.1초)
#define MAX_SHOOT_RANGE  5.0f       // 사정거리

void AutoShoot() {
    INPUT input = {0};
    input.type = INPUT_MOUSE;
    input.mi.dwFlags = MOUSEEVENTF_LEFTDOWN;
    SendInput(1, &input, sizeof(INPUT));

    input.mi.dwFlags = MOUSEEVENTF_LEFTUP;
    SendInput(1, &input, sizeof(INPUT));
}

float Distance(float x1, float y1, float z1, float x2, float y2, float z2) {
    return sqrtf(powf(x2 - x1, 2) + powf(y2 - y1, 2) + powf(z2 - z1, 2));
}

int main() {
    HWND hwnd = FindWindowA(NULL, "AssaultCube");
    if (!hwnd) {
        std::cout << "AssaultCube 실행 중인지 확인하세요.\n";
        return 1;
    }

    DWORD pid = 0;
    GetWindowThreadProcessId(hwnd, &pid);
    HANDLE hProc = OpenProcess(PROCESS_VM_READ | PROCESS_QUERY_INFORMATION, FALSE, pid);
    if (!hProc) {
        std::cout << "프로세스 열기 실패\n";
        return 1;
    }

    DWORD myPlayerBase = 0;
    ReadProcessMemory(hProc, (LPCVOID)MY_PLAYER_PTR, &myPlayerBase, sizeof(DWORD), NULL);

    while (true) {
        float myX = 0, myY = 0, myZ = 0;
        ReadProcessMemory(hProc, (LPCVOID)(myPlayerBase + PLAYER_X), &myX, sizeof(float), NULL);
        ReadProcessMemory(hProc, (LPCVOID)(myPlayerBase + PLAYER_Y), &myY, sizeof(float), NULL);
        ReadProcessMemory(hProc, (LPCVOID)(myPlayerBase + PLAYER_Z), &myZ, sizeof(float), NULL);

        int myTeam = 0;
        ReadProcessMemory(hProc, (LPCVOID)(myPlayerBase + PLAYER_TEAM), &myTeam, sizeof(int), NULL);

        for (int i = 0; i < MAX_PLAYERS; ++i) {
            DWORD entityPtr = 0;
            ReadProcessMemory(hProc, (LPCVOID)(ENTITY_LIST + i * 4), &entityPtr, sizeof(DWORD), NULL);
            if (entityPtr == 0 || entityPtr == myPlayerBase) continue;

            int hp = 0, team = 0;
            ReadProcessMemory(hProc, (LPCVOID)(entityPtr + PLAYER_HP), &hp, sizeof(int), NULL);
            ReadProcessMemory(hProc, (LPCVOID)(entityPtr + PLAYER_TEAM), &team, sizeof(int), NULL);
            if (hp <= 0 || team == myTeam) continue;

            float x = 0, y = 0, z = 0;
            ReadProcessMemory(hProc, (LPCVOID)(entityPtr + PLAYER_X), &x, sizeof(float), NULL);
            ReadProcessMemory(hProc, (LPCVOID)(entityPtr + PLAYER_Y), &y, sizeof(float), NULL);
            ReadProcessMemory(hProc, (LPCVOID)(entityPtr + PLAYER_Z), &z, sizeof(float), NULL);

            float dist = Distance(myX, myY, myZ, x, y, z);
            std::cout << "적 #" << i << " 거리: " << dist << "\n";

            if (dist < MAX_SHOOT_RANGE) {
                std::cout << "적 감지됨! 사격!\n";
                AutoShoot();
                break;
            }
        }

        std::this_thread::sleep_for(std::chrono::milliseconds(SCAN_INTERVAL_MS));
    }

    CloseHandle(hProc);
    return 0;
}
