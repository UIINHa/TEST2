#include <windows.h>
#include <tlhelp32.h>
#include <iostream>
#include <cmath>
#include <thread>
#include <iomanip>

#define ENTITY_LIST_OFFSET 0x10F4F8
#define LOCAL_PLAYER_OFFSET  0x10F4F4
#define ENTITY_SIZE 0x1EC
#define MAX_PLAYERS 32
#define OFFSET_X 0x04
#define OFFSET_Y 0x08
#define OFFSET_Z 0x0C
#define OFFSET_HP 0x30
#define OFFSET_ALIVE 0x20C

uintptr_t GetModuleBaseAddress(DWORD pid, const wchar_t* modName) {
    HANDLE hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, pid);
    MODULEENTRY32 modEntry;
    modEntry.dwSize = sizeof(modEntry);
    if (Module32First(hSnap, &modEntry)) {
        do {
            if (!_wcsicmp(modEntry.szModule, modName)) {
                CloseHandle(hSnap);
                return (uintptr_t)modEntry.modBaseAddr;
            }
        } while (Module32Next(hSnap, &modEntry));
    }
    CloseHandle(hSnap);
    return 0;
}

float GetDistance(float x1, float y1, float z1, float x2, float y2, float z2) {
    return sqrtf((x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1) + (z2 - z1)*(z2 - z1));
}

int main() {
    HWND hwnd = FindWindowA(NULL, "AssaultCube");
    if (!hwnd) {
        std::cout << "게임 창을 찾지 못했습니다.\n";
        return 1;
    }

    DWORD pid;
    GetWindowThreadProcessId(hwnd, &pid);
    HANDLE hProc = OpenProcess(PROCESS_VM_READ | PROCESS_QUERY_INFORMATION, FALSE, pid);
    if (!hProc) {
        std::cout << "프로세스 열기 실패\n";
        return 1;
    }

    uintptr_t base = GetModuleBaseAddress(pid, L"ac_client.exe");
    uintptr_t localPlayerPtrAddr = base + LOCAL_PLAYER_OFFSET;
    uintptr_t entityListBase = base + ENTITY_LIST_OFFSET;

    DWORD localPlayer;
    ReadProcessMemory(hProc, (LPCVOID)localPlayerPtrAddr, &localPlayer, sizeof(DWORD), nullptr);

    float myX, myY, myZ;

    while (true) {
        ReadProcessMemory(hProc, (LPCVOID)(localPlayer + OFFSET_X), &myX, sizeof(float), nullptr);
        ReadProcessMemory(hProc, (LPCVOID)(localPlayer + OFFSET_Y), &myY, sizeof(float), nullptr);
        ReadProcessMemory(hProc, (LPCVOID)(localPlayer + OFFSET_Z), &myZ, sizeof(float), nullptr);

        std::cout << std::fixed << std::setprecision(2);
        std::cout << "내 위치: X=" << myX << ", Y=" << myY << ", Z=" << myZ << "\n";

        for (int i = 1; i < MAX_PLAYERS; ++i) {
            DWORD entityAddr;
            ReadProcessMemory(hProc, (LPCVOID)(entityListBase + i * 4), &entityAddr, sizeof(DWORD), nullptr);
            if (entityAddr == 0 || entityAddr == localPlayer) continue;

            int hp = 0;
            int alive = 0;
            ReadProcessMemory(hProc, (LPCVOID)(entityAddr + OFFSET_HP), &hp, sizeof(int), nullptr);
            ReadProcessMemory(hProc, (LPCVOID)(entityAddr + OFFSET_ALIVE), &alive, sizeof(int), nullptr);

            float ex = 0, ey = 0, ez = 0;
            ReadProcessMemory(hProc, (LPCVOID)(entityAddr + OFFSET_X), &ex, sizeof(float), nullptr);
            ReadProcessMemory(hProc, (LPCVOID)(entityAddr + OFFSET_Y), &ey, sizeof(float), nullptr);
            ReadProcessMemory(hProc, (LPCVOID)(entityAddr + OFFSET_Z), &ez, sizeof(float), nullptr);

            float dist = GetDistance(myX, myY, myZ, ex, ey, ez);

            std::cout << "[Entity " << i << "] Addr: 0x" << std::hex << entityAddr << std::dec << "\n";
            std::cout << "  HP: " << hp << " | Alive: " << alive << "\n";
            std::cout << "  위치: X=" << ex << " Y=" << ey << " Z=" << ez << "\n";
            std::cout << "  거리: " << dist << "\n\n";
        }

        std::cout << "-----------------------------\n";
        Sleep(2000); // 2초 간격으로 반복
    }

    CloseHandle(hProc);
    return 0;
}
